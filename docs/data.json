{
    "project": {
        "name": "WebGL",
        "url": "webgl-render.azurewebsites.net",
        "version": "1.0.0"
    },
    "files": {
        "src/main/javascript/cloud.js": {
            "name": "src/main/javascript/cloud.js",
            "modules": {},
            "classes": {
                "Cloud": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/float4x4.js": {
            "name": "src/main/javascript/float4x4.js",
            "modules": {},
            "classes": {
                "Float4x4": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/floatNxN.js": {
            "name": "src/main/javascript/floatNxN.js",
            "modules": {},
            "classes": {
                "FloatNxN": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/loader-path.js": {
            "name": "src/main/javascript/loader-path.js",
            "modules": {},
            "classes": {
                "LoaderPath": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/loader-shader.js": {
            "name": "src/main/javascript/loader-shader.js",
            "modules": {},
            "classes": {
                "LoaderShader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/loader.js": {
            "name": "src/main/javascript/loader.js",
            "modules": {},
            "classes": {
                "Loader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/node.js": {
            "name": "src/main/javascript/node.js",
            "modules": {},
            "classes": {
                "Node": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/program.js": {
            "name": "src/main/javascript/program.js",
            "modules": {},
            "classes": {
                "Program": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/render.js": {
            "name": "src/main/javascript/render.js",
            "modules": {},
            "classes": {
                "Render": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/shader.js": {
            "name": "src/main/javascript/shader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/texture.js": {
            "name": "src/main/javascript/texture.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/thing.js": {
            "name": "src/main/javascript/thing.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/utility.js": {
            "name": "src/main/javascript/utility.js",
            "modules": {},
            "classes": {
                "Utility": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Cloud": {
            "name": "Cloud",
            "shortname": "Cloud",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/cloud.js",
            "line": 1,
            "description": "A Cloud, a scene graph node for displaying points in space."
        },
        "Float4x4": {
            "name": "Float4x4",
            "shortname": "Float4x4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/float4x4.js",
            "line": 1,
            "description": "A 4x4 matrix used as a 3D transformation",
            "extends": "FloatNxN"
        },
        "FloatNxN": {
            "name": "FloatNxN",
            "shortname": "FloatNxN",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/floatNxN.js",
            "line": 1,
            "description": "A (square) NxN matrix"
        },
        "LoaderPath": {
            "name": "LoaderPath",
            "shortname": "LoaderPath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/loader-path.js",
            "line": 1,
            "description": "A loader for external assets, which assumes assets reside in a common base path, and are named as\nthe file element is named."
        },
        "LoaderShader": {
            "name": "LoaderShader",
            "shortname": "LoaderShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/loader-shader.js",
            "line": 1,
            "description": "A loader for external shader assets."
        },
        "Loader": {
            "name": "Loader",
            "shortname": "Loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/loader.js",
            "line": 1,
            "description": "A loader for external assets."
        },
        "Node": {
            "name": "Node",
            "shortname": "Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/node.js",
            "line": 1,
            "description": "A node in a scene graph."
        },
        "Program": {
            "name": "Program",
            "shortname": "Program",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/program.js",
            "line": 1,
            "description": "A Vertex and Fragment \"shader\" pairing, and utilities for setting attributes and parameters."
        },
        "Render": {
            "name": "Render",
            "shortname": "Render",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/render.js",
            "line": 3,
            "description": "A Rendering context."
        },
        "Utility": {
            "name": "Utility",
            "shortname": "Utility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/utility.js",
            "line": 1,
            "description": "A collection of utility functions."
        }
    },
    "elements": {
        "POSITION_ATTRIBUTE": {
            "name": "POSITION_ATTRIBUTE",
            "attributes": [],
            "file": "src/main/javascript/program.js",
            "line": 9,
            "description": "the name for the standard POSITION buffer attribute in a shader.",
            "type": "{string}",
            "final": 1
        },
        "NORMAL_ATTRIBUTE": {
            "name": "NORMAL_ATTRIBUTE",
            "attributes": [],
            "file": "src/main/javascript/program.js",
            "line": 17,
            "description": "the name for the standard NORMAL buffer attribute in a shader.",
            "type": "{string}",
            "final": 1
        },
        "TEXTURE_ATTRIBUTE": {
            "name": "TEXTURE_ATTRIBUTE",
            "attributes": [],
            "file": "src/main/javascript/program.js",
            "line": 25,
            "description": "the name for the standard TEXTURE buffer attribute in a shader.",
            "type": "{string}",
            "final": 1
        }
    },
    "classitems": [
        {
            "file": "src/main/javascript/cloud.js",
            "line": 9,
            "description": "the initializer for a cloud.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "parameters",
                    "description": "an object with optional information for the cloud node, including:\n* pointShape: (default = \"sphere2\")\n* pointSize: (default = 0.02)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Cloud"
            },
            "class": "Cloud"
        },
        {
            "file": "src/main/javascript/cloud.js",
            "line": 29,
            "description": "add a point to the cloud.",
            "itemtype": "method",
            "name": "addPoint",
            "params": [
                {
                    "name": "point",
                    "description": "the location of the new point.",
                    "type": "Float3"
                }
            ],
            "chainable": 1,
            "class": "Cloud"
        },
        {
            "file": "src/main/javascript/cloud.js",
            "line": 46,
            "description": "add multiple points to the cloud.",
            "itemtype": "method",
            "name": "addPoints",
            "params": [
                {
                    "name": "points",
                    "description": "an array of Float3 points to be added.",
                    "type": "Array"
                }
            ],
            "chainable": 1,
            "class": "Cloud"
        },
        {
            "file": "src/main/javascript/cloud.js",
            "line": 59,
            "description": "static method to create and construct a new cloud node.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "parameters",
                    "description": "an object with optional information to include in the node (see\n\"Node.construct\" for more information)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Cloud"
            },
            "class": "Cloud"
        },
        {
            "file": "src/main/javascript/floatNxN.js",
            "line": 20,
            "description": "Create a new FloatNxN.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "return": {
                "description": "",
                "type": "FloatNxN"
            },
            "class": "FloatNxN"
        },
        {
            "file": "src/main/javascript/floatNxN.js",
            "line": 31,
            "description": "Copy contents from an array into a FloatNxN and return the result.",
            "itemtype": "method",
            "name": "copy",
            "static": 1,
            "params": [
                {
                    "name": "from",
                    "description": "source.",
                    "type": "FloatNxN"
                },
                {
                    "name": "to",
                    "description": "destination. if 'to' is omitted, a new one will be created.",
                    "type": "FloatNxN"
                }
            ],
            "return": {
                "description": "returns 'to'.",
                "type": "FloatNxN"
            },
            "class": "FloatNxN"
        },
        {
            "file": "src/main/javascript/loader-path.js",
            "line": 10,
            "description": "the initializer for a path loader.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "parameters",
                    "description": "an object specifying the loader class parameters",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Loader"
            },
            "class": "LoaderPath"
        },
        {
            "file": "src/main/javascript/loader-path.js",
            "line": 33,
            "description": "static method to create and construct a new LoaderPath.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "parameters",
                    "description": "an object including Loader class parameters, as well as the type\nand path to use for all operations. The \"path\" parameter should contain a \"@\" to be replaced\nwith the fetch name.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "LoaderPath"
            },
            "class": "LoaderPath"
        },
        {
            "file": "src/main/javascript/loader-shader.js",
            "line": 9,
            "description": "the initializer for a shader loader.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "path",
                    "description": "the common path for a path loader.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "LoaderShader"
            },
            "class": "LoaderShader"
        },
        {
            "file": "src/main/javascript/loader-shader.js",
            "line": 37,
            "description": "static method to create and construct a new LoaderPath.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "the common path for a path loader.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "LoaderShader"
            },
            "class": "LoaderShader"
        },
        {
            "file": "src/main/javascript/loader.js",
            "line": 9,
            "description": "the initializer for a loader.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "parameters",
                    "description": "an object specifying callback parameters (see \"new\")",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Loader"
            },
            "class": "Loader"
        },
        {
            "file": "src/main/javascript/loader.js",
            "line": 40,
            "description": "start the fetch process for all the loadable items.",
            "itemtype": "method",
            "name": "go",
            "params": [
                {
                    "name": "parameters",
                    "description": "an object specifying the scope and callback to call when an item\nis finished, and when all items are finished (onFinishedAll, onFinishedItem).",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src/main/javascript/loader.js",
            "line": 54,
            "description": "continue the fetch process for all the loadable items.",
            "itemtype": "method",
            "name": "next",
            "chainable": 1,
            "class": "Loader"
        },
        {
            "file": "src/main/javascript/loader.js",
            "line": 71,
            "description": "static method to create and construct a new Loader.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "parameters",
                    "description": "an object specifying the scope and callback to call when an item\nis finished, and when all items are finished (onFinishedAll, onFinishedItem).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Loader"
            },
            "class": "Loader"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 11,
            "description": "the initializer for a scene graph node.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "parameters",
                    "description": "an object with optional information to include in the node. The\npossibilities are:\n* name {string}: nodes can be named if they need to be retrieved later.\n* transform {Float4x4}: a transformation matrix to apply before drawing or traversing children.\n* state {function}: a parameter-less function to call before drawing or traversing children.\nthis function may set any render state needed.\n* shape {string}: the name of a shape to draw.\n* children: the node will have an array of children by default, but if the node is intended\nto be a leaf, you can save the space and time associated with an empty list by setting this\nvalue to \"false\".",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 234,
            "description": "add a child node (only applies to non-leaf nodes).",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "node",
                    "description": "the node to add as a child.",
                    "type": "Node"
                }
            ],
            "chainable": 1,
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 250,
            "description": "draw this node's contents.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "standardUniforms",
                    "description": "the container for standard parameters, as documented in\nProgram",
                    "type": "Object"
                }
            ],
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 263,
            "description": "traverse this node and its contents. this funciton is a place-holder that is replaced by the\nactual function called depending on the parameters passed during construction.",
            "itemtype": "method",
            "name": "traverse",
            "params": [
                {
                    "name": "standardUniforms",
                    "description": "the container for standard parameters, as documented in\nProgram",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 276,
            "description": "get the name of this node (if it has one).",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the name of this node, or just \"node\".",
                "type": "String"
            },
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 286,
            "description": "get a node by name.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the node to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 297,
            "description": "static method to create and construct a new scene graph node.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "parameters",
                    "description": "an object with optional information to include in the node (see\n\"construct\" for more information)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 36,
            "description": "the initializer for a shader.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "name",
                    "description": "name to retrieve this shader",
                    "type": "String"
                },
                {
                    "name": "parameters",
                    "description": "shader construction parameters",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Program"
            },
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 103,
            "description": "set the standard shader parameters in one call.",
            "itemtype": "method",
            "name": "setStandardUniforms",
            "params": [
                {
                    "name": "parameters",
                    "description": "a mapping of standard parameter names to values, as specified in\nthe initialization of the shader",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 130,
            "description": "bind the POSITION attribute to the given buffer.",
            "itemtype": "method",
            "name": "bindPositionAttribute",
            "params": [
                {
                    "name": "buffer",
                    "description": "WebGL buffer to bind",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 141,
            "description": "bind the NORMAL attribute to the given buffer.",
            "itemtype": "method",
            "name": "bindNormalAttribute",
            "params": [
                {
                    "name": "buffer",
                    "description": "WebGL buffer to bind",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 152,
            "description": "bind the TEXTURE attribute to the given buffer.",
            "itemtype": "method",
            "name": "bindTextureAttribute",
            "params": [
                {
                    "name": "buffer",
                    "description": "WebGL buffer to bind",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 164,
            "description": "disable the enabled buffers.",
            "itemtype": "method",
            "name": "unbindAttributes",
            "return": {
                "description": "",
                "type": "Program"
            },
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 176,
            "description": "fetch the shader currently in use.",
            "itemtype": "method",
            "name": "getCurrentProgram",
            "static": 1,
            "return": {
                "description": "",
                "type": "Program"
            },
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 187,
            "description": "set this as the current shader in the rendering context.",
            "itemtype": "method",
            "name": "use",
            "chainable": 1,
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 220,
            "description": "get the name of this shader",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the name of this shader.",
                "type": "String"
            },
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 230,
            "description": "static method to create and construct a new Program.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "name to retrieve this shader",
                    "type": "String"
                },
                {
                    "name": "parameters",
                    "description": "shader construction parameters\nvertexShader name of the vertex shader to use\nfragmentShader name of the fragment shader to use\nattributeMapping maps POSITION, NORMAL, and TEXTURE attributes to the\nattribute names in the shader. This allows the engine to manage the attributes without\nforcing the shader author to use \"standard\" names for everything. Defaults to:\n* POSITION_ATTRIBUTE: \"inputPosition\"\n* NORMAL_ATTRIBUTE: \"inputNormal\"\n* TEXTURE_ATTRIBUTE: \"inputTexture\"\nparameterMapping maps standard parameters to the parameter names in the\nshader. This allows the engine to manage setting the standard set of parameters on the shader\nwithout forcing the shader author to use \"standard\" names. Defaults to:\n* MODEL_MATRIX_PARAMETER: \"modelMatrix\"\n* VIEW_MATRIX_PARAMETER: \"viewMatrix\"\n* PROJECTION_MATRIX_PARAMETER: \"projectionMatrix\"\n* NORMAL_MATRIX_PARAMETER: \"normalMatrix\"\n* CAMERA_POSITION: \"cameraPosition\"\n* OUTPUT_ALPHA_PARAMETER: \"outputAlpha\"\n* TEXTURE_SAMPLER: \"textureSampler\"\n* MODEL_COLOR:\"modelColor\"\n* AMBIENT_LIGHT_COLOR: \"ambientLightColor\"\n* AMBIENT_CONTRIBUTION:\"ambientContribution\"\n* LIGHT_DIRECTION: \"lightDirection\"\n* LIGHT_COLOR:\"lightColor\"\n* DIFFUSE_CONTRIBUTION:\"diffuseContribution\"\n* SPECULAR_CONTRIBUTION:\"specularContribution\"\n* SPECULAR_EXPONENT:\"specularExponent\"",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Program"
            },
            "class": "Program"
        },
        {
            "file": "src/main/javascript/program.js",
            "line": 305,
            "description": "fetch a program by name.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "return": {
                "description": "",
                "type": "Program"
            },
            "class": "Program"
        },
        {
            "file": "src/main/javascript/render.js",
            "line": 11,
            "description": "The initializer for a rendering context.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "canvasId",
                    "description": "the id of the canvas element to use for the rendering context",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Render"
            },
            "class": "Render"
        },
        {
            "file": "src/main/javascript/render.js",
            "line": 56,
            "description": "Set the global rendering context.",
            "itemtype": "method",
            "name": "use",
            "class": "Render"
        },
        {
            "file": "src/main/javascript/render.js",
            "line": 65,
            "description": "Static method to create and construct a new rendering context.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "canvasId",
                    "description": "the id of the canvas element to use for the rendering context.",
                    "type": "String"
                },
                {
                    "name": "aspectRatio",
                    "description": "the width / height of the canvas.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Render"
            },
            "class": "Render"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 31,
            "description": "static method to create and construct a new Shader.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name to use to refer to this shader",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "where to get this shader",
                    "type": "String"
                },
                {
                    "name": "parameters",
                    "description": "shader construction parameters, typically url and type, where\ntype is one of (context.VERTEX_SHADER, context.FRAGMENT_SHADER)",
                    "type": "Object"
                },
                {
                    "name": "onReady",
                    "description": "an object specifying the scope and callback to call when ready",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 48,
            "description": "fetch a shader by name.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name of the shader to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/texture.js",
            "line": 41,
            "description": "static method to create and construct a new Texture.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name to use to refer to this texture",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "where to get this texture",
                    "type": "String"
                },
                {
                    "name": "parameters",
                    "description": "texture construction parameters",
                    "type": "Object"
                },
                {
                    "name": "onReady",
                    "description": "an object specifying the scope and callback to call when ready",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/texture.js",
            "line": 60,
            "description": "fetch a texture by name.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name of the texture to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/thing.js",
            "line": 17,
            "description": "fetch a thing by name.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name of the thing to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Thing"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 31,
            "description": "Convert an angle measured in degrees to radians.",
            "itemtype": "method",
            "name": "degreesToRadians",
            "params": [
                {
                    "name": "degrees",
                    "description": "the degree measure to be converted",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 54,
            "description": "Convert an angle measured in radians to degrees.",
            "itemtype": "method",
            "name": "radiansToDegrees",
            "params": [
                {
                    "name": "radians",
                    "description": "the radian measure to be converted",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 65,
            "description": "Make the first letter of a string be upper case.",
            "itemtype": "method",
            "name": "uppercase",
            "params": [
                {
                    "name": "string",
                    "description": "the text to convert to upper case",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 76,
            "description": "Make the first letter of a string be lower case.",
            "itemtype": "method",
            "name": "lowercase",
            "params": [
                {
                    "name": "string",
                    "description": "the text to convert to lower case",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 87,
            "description": "Convert an array of arrays to a single array of values (in order).",
            "itemtype": "method",
            "name": "flatten",
            "params": [
                {
                    "name": "array",
                    "description": "the input array of arrays",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 104,
            "description": "truncate a number to a specific precision, equivalent to discretization",
            "itemtype": "method",
            "name": "fixNum",
            "params": [
                {
                    "name": "number",
                    "description": "the number to discretize",
                    "type": "Float"
                },
                {
                    "name": "precision",
                    "description": "how many decimal places to force",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 117,
            "description": "provide a default value if the requested value is undefined. this is\nhere because the macro doesn't handle multiline values.",
            "itemtype": "method",
            "name": "defaultValue",
            "params": [
                {
                    "name": "value",
                    "description": "the value to test for undefined",
                    "type": "Any"
                },
                {
                    "name": "defaultValue",
                    "description": "the default value to provide if value is undefined",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 130,
            "description": "provide a default value if the requested value is undefined by calling a function. this is\nhere because the macro doesn't handle multiline values.",
            "itemtype": "method",
            "name": "defaultFunction",
            "params": [
                {
                    "name": "value",
                    "description": "the value to test for undefined",
                    "type": "Any"
                },
                {
                    "name": "defaultFunction",
                    "description": "the function to call if value is undefined",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 143,
            "description": "create a reversed mapping from a given object (assumes 1:1 values)",
            "itemtype": "method",
            "name": "reverseMap",
            "params": [
                {
                    "name": "mapping",
                    "description": "the the object containing the mapping to be reversed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Utility"
        }
    ],
    "warnings": []
}