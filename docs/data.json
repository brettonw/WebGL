{
    "project": {
        "name": "WebGL",
        "url": "webgl-render.azurewebsites.net",
        "version": "1.0.0"
    },
    "files": {
        "src/main/javascript/cloud.js": {
            "name": "src/main/javascript/cloud.js",
            "modules": {},
            "classes": {
                "Cloud": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/node.js": {
            "name": "src/main/javascript/node.js",
            "modules": {},
            "classes": {
                "Node": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/render.js": {
            "name": "src/main/javascript/render.js",
            "modules": {},
            "classes": {
                "Render": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/shader.js": {
            "name": "src/main/javascript/shader.js",
            "modules": {},
            "classes": {
                "Shader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/main/javascript/utility.js": {
            "name": "src/main/javascript/utility.js",
            "modules": {},
            "classes": {
                "Utility": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Cloud": {
            "name": "Cloud",
            "shortname": "Cloud",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/cloud.js",
            "line": 1,
            "description": "A Cloud, a scene graph node for displaying points in space."
        },
        "Node": {
            "name": "Node",
            "shortname": "Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/node.js",
            "line": 1,
            "description": "A node in a scene graph."
        },
        "Render": {
            "name": "Render",
            "shortname": "Render",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/render.js",
            "line": 3,
            "description": "A Rendering context."
        },
        "Shader": {
            "name": "Shader",
            "shortname": "Shader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/shader.js",
            "line": 1,
            "description": "A Vertex and Fragment \"shader\" pairing, and utilities for setting attributes and parameters."
        },
        "Utility": {
            "name": "Utility",
            "shortname": "Utility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/main/javascript/utility.js",
            "line": 1,
            "description": "A collection of utility functions."
        }
    },
    "elements": {
        "POSITION_ATTRIBUTE": {
            "name": "POSITION_ATTRIBUTE",
            "attributes": [],
            "file": "src/main/javascript/shader.js",
            "line": 9,
            "description": "The name for the standard POSITION buffer attribute in a shader",
            "type": "{string}",
            "final": 1
        },
        "NORMAL_ATTRIBUTE": {
            "name": "NORMAL_ATTRIBUTE",
            "attributes": [],
            "file": "src/main/javascript/shader.js",
            "line": 17,
            "description": "The name for the standard NORMAL buffer attribute in a shader",
            "type": "{string}",
            "final": 1
        },
        "TEXTURE_ATTRIBUTE": {
            "name": "TEXTURE_ATTRIBUTE",
            "attributes": [],
            "file": "src/main/javascript/shader.js",
            "line": 25,
            "description": "The name for the standard TEXTURE buffer attribute in a shader",
            "type": "{string}",
            "final": 1
        }
    },
    "classitems": [
        {
            "file": "src/main/javascript/cloud.js",
            "line": 9,
            "description": "Add a point to the cloud",
            "itemtype": "method",
            "name": "addPoint",
            "params": [
                {
                    "name": "point",
                    "description": "the location of the new point.",
                    "type": "Float3"
                }
            ],
            "chainable": 1,
            "class": "Cloud"
        },
        {
            "file": "src/main/javascript/cloud.js",
            "line": 26,
            "description": "Static method to create and construct a new cloud node.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "parameters",
                    "description": "an object with optional information to include in the node (see\n\"Node.construct\" for more information)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Cloud"
            },
            "class": "Cloud"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 11,
            "description": "The initializer for a scene graph node.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "parameters",
                    "description": "an object with optional information to include in the node. The\npossibilities are:\n* name {string}: nodes can be named if they need to be retrieved later.\n* transform {Float4x4}: a transformation matrix to apply before drawing or traversing children.\n* state {function}: a parameter-less function to call before drawing or traversing children.\nthis function may set any render state needed.\n* shape {string}: the name of a shape to draw.\n* children: the node will have an array of children by default, but if the node is intended\nto be a leaf, you can save the space and time associated with an empty list by setting this\nvalue to \"false\".",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 180,
            "description": "Add a child node (only applies to non-leaf nodes)",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "node",
                    "description": "the node to add as a child.",
                    "type": "Node"
                }
            ],
            "chainable": 1,
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 196,
            "description": "Get the name of this node (if it has one)",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the name of this node, or just \"node\".",
                "type": "String"
            },
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 206,
            "description": "Get a node by name",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the node to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node"
        },
        {
            "file": "src/main/javascript/node.js",
            "line": 217,
            "description": "Static method to create and construct a new scene graph node.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "parameters",
                    "description": "an object with optional information to include in the node (see\n\"construct\" for more information)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node"
        },
        {
            "file": "src/main/javascript/render.js",
            "line": 11,
            "description": "The initializer for a rendering context.",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "canvasId",
                    "description": "the id of the canvas element to use for the rendering context",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Render"
            },
            "class": "Render"
        },
        {
            "file": "src/main/javascript/render.js",
            "line": 27,
            "description": "Set the global rendering context.",
            "itemtype": "method",
            "name": "use",
            "class": "Render"
        },
        {
            "file": "src/main/javascript/render.js",
            "line": 36,
            "description": "Static method to create and construct a new rendering context.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "canvasId",
                    "description": "the id of the canvas element to use for the rendering context.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Render"
            },
            "class": "Render"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 36,
            "description": "The initializer for a shader.",
            "itemtype": "method",
            "name": "new",
            "params": [
                {
                    "name": "name",
                    "description": "name to retrieve this shader",
                    "type": "String"
                },
                {
                    "name": "vertexShaderUrl",
                    "description": "url to the vertex shader GLSL file",
                    "type": "String"
                },
                {
                    "name": "fragmentShaderUrl",
                    "description": "url to the fragment shader GLSL file",
                    "type": "String"
                },
                {
                    "name": "attributeMapping",
                    "description": "maps POSITION, NORMAL, and TEXTURE attributes to the\nattribute names in the shader",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 125,
            "description": "Bind the POSITION attribute to the given buffer.",
            "itemtype": "method",
            "name": "bindPositionAttribute",
            "static": 1,
            "params": [
                {
                    "name": "buffer",
                    "description": "WebGL buffer to bind",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 137,
            "description": "Bind the NORMAL attribute to the given buffer.",
            "itemtype": "method",
            "name": "bindNormalAttribute",
            "static": 1,
            "params": [
                {
                    "name": "buffer",
                    "description": "WebGL buffer to bind",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 149,
            "description": "Bind the TEXTURE attribute to the given buffer.",
            "itemtype": "method",
            "name": "bindTextureAttribute",
            "static": 1,
            "params": [
                {
                    "name": "buffer",
                    "description": "WebGL buffer to bind",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 161,
            "description": "Fetch the shader currently in use.",
            "itemtype": "method",
            "name": "getCurrentShader",
            "static": 1,
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 172,
            "description": "Set this as the current shader in the rendering context.",
            "itemtype": "method",
            "name": "use",
            "chainable": 1,
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 186,
            "description": "Get the name of this shader",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the name of this shader.",
                "type": "String"
            },
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 196,
            "description": "Static method to create and construct a new Shader.",
            "itemtype": "method",
            "name": "new",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "name to retrieve this shader",
                    "type": "String"
                },
                {
                    "name": "vertexShaderUrl",
                    "description": "url to the vertex shader GLSL file",
                    "type": "String"
                },
                {
                    "name": "fragmentShaderUrl",
                    "description": "url to the fragment shader GLSL file",
                    "type": "String"
                },
                {
                    "name": "attributeMapping",
                    "description": "maps POSITION, NORMAL, and TEXTURE attributes to the\nattribute names in the shader. Defaults to:\n* POSITION_ATTRIBUTE: \"inputPosition\"\n* NORMAL_ATTRIBUTE: \"inputNormal\"\n* TEXTURE_ATTRIBUTE: \"inputTexture\"",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/shader.js",
            "line": 220,
            "description": "Fetch a shader by name.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "return": {
                "description": "",
                "type": "Shader"
            },
            "class": "Shader"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 9,
            "description": "Convert an angle measured in degrees to radians.",
            "itemtype": "method",
            "name": "degreesToRadians",
            "params": [
                {
                    "name": "degrees",
                    "description": "the degree measure to be converted",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 20,
            "description": "Convert an angle measured in radians to degrees.",
            "itemtype": "method",
            "name": "radiansToDegrees",
            "params": [
                {
                    "name": "radians",
                    "description": "the radian measure to be converted",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 31,
            "description": "Make the first letter of a string be upper case.",
            "itemtype": "method",
            "name": "uppercase",
            "params": [
                {
                    "name": "string",
                    "description": "the text to convert to upper case",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 42,
            "description": "Make the first letter of a string be lower case.",
            "itemtype": "method",
            "name": "lowercase",
            "params": [
                {
                    "name": "string",
                    "description": "the text to convert to lower case",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 53,
            "description": "Convert an array of arrays to a single array of values (in order).",
            "itemtype": "method",
            "name": "flatten",
            "params": [
                {
                    "name": "array",
                    "description": "the input array of arrays",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Utility"
        },
        {
            "file": "src/main/javascript/utility.js",
            "line": 70,
            "description": "truncate a number to a specific precision, equivalent to discretization",
            "itemtype": "method",
            "name": "fixNum",
            "params": [
                {
                    "name": "number",
                    "description": "the number to discretize",
                    "type": "Float"
                },
                {
                    "name": "precision",
                    "description": "how many decimal places to force",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Utility"
        }
    ],
    "warnings": []
}